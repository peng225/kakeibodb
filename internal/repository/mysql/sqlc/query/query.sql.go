// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"strings"
)

const createEvent = `-- name: CreateEvent :execresult
INSERT INTO event (
   dt, money, description
) VALUES (
  ?, ?, ?
)
`

type CreateEventParams struct {
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEvent, arg.Dt, arg.Money, arg.Description)
}

const createPattern = `-- name: CreatePattern :execresult
INSERT INTO pattern (key_string) VALUES (?)
`

func (q *Queries) CreatePattern(ctx context.Context, keyString sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPattern, keyString)
}

const createTag = `-- name: CreateTag :execresult
INSERT INTO tag (name) VALUES (?)
`

func (q *Queries) CreateTag(ctx context.Context, name sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTag, name)
}

const deleteEventByID = `-- name: DeleteEventByID :exec
DELETE FROM event
WHERE id = ?
`

func (q *Queries) DeleteEventByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEventByID, id)
	return err
}

const deletePatternByID = `-- name: DeletePatternByID :exec
DELETE FROM pattern
WHERE id = ?
`

func (q *Queries) DeletePatternByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePatternByID, id)
	return err
}

const deleteTagByID = `-- name: DeleteTagByID :exec
DELETE FROM tag
WHERE id = ?
`

func (q *Queries) DeleteTagByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTagByID, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, dt, money, description FROM event
WHERE dt = ? AND money = ? AND description = ?
`

type GetEventParams struct {
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
}

func (q *Queries) GetEvent(ctx context.Context, arg GetEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, arg.Dt, arg.Money, arg.Description)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Dt,
		&i.Money,
		&i.Description,
	)
	return i, err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, dt, money, description FROM event
WHERE id = ?
`

func (q *Queries) GetEventByID(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Dt,
		&i.Money,
		&i.Description,
	)
	return i, err
}

const getEventToTagMap = `-- name: GetEventToTagMap :one
SELECT event_id, tag_id FROM event_to_tag
WHERE event_id = ? AND tag_id = ?
`

type GetEventToTagMapParams struct {
	EventID sql.NullInt64
	TagID   sql.NullInt64
}

func (q *Queries) GetEventToTagMap(ctx context.Context, arg GetEventToTagMapParams) (EventToTag, error) {
	row := q.db.QueryRowContext(ctx, getEventToTagMap, arg.EventID, arg.TagID)
	var i EventToTag
	err := row.Scan(&i.EventID, &i.TagID)
	return i, err
}

const getPattern = `-- name: GetPattern :one
SELECT id, key_string FROM pattern WHERE key_string = ?
`

func (q *Queries) GetPattern(ctx context.Context, keyString sql.NullString) (Pattern, error) {
	row := q.db.QueryRowContext(ctx, getPattern, keyString)
	var i Pattern
	err := row.Scan(&i.ID, &i.KeyString)
	return i, err
}

const getPatternToTagMap = `-- name: GetPatternToTagMap :one
SELECT pattern_id, tag_id FROM pattern_to_tag
WHERE pattern_id = ? AND tag_id = ?
`

type GetPatternToTagMapParams struct {
	PatternID sql.NullInt64
	TagID     sql.NullInt64
}

func (q *Queries) GetPatternToTagMap(ctx context.Context, arg GetPatternToTagMapParams) (PatternToTag, error) {
	row := q.db.QueryRowContext(ctx, getPatternToTagMap, arg.PatternID, arg.TagID)
	var i PatternToTag
	err := row.Scan(&i.PatternID, &i.TagID)
	return i, err
}

const getTag = `-- name: GetTag :one
SELECT id, name FROM tag WHERE name = ?
`

func (q *Queries) GetTag(ctx context.Context, name sql.NullString) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT event.id, event.dt, event.money, event.description, tag.name AS tagName FROM event
LEFT OUTER JOIN event_to_tag ON event.id = event_to_tag.event_id
LEFT OUTER JOIN tag ON tag.id = event_to_tag.tag_id
WHERE event.dt BETWEEN ? AND ?
ORDER BY event.id
`

type ListEventsParams struct {
	FromDt sql.NullTime
	ToDt   sql.NullTime
}

type ListEventsRow struct {
	ID          int64
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
	Tagname     sql.NullString
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]ListEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.FromDt, arg.ToDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEventsRow
	for rows.Next() {
		var i ListEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Dt,
			&i.Money,
			&i.Description,
			&i.Tagname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsWithTags = `-- name: ListEventsWithTags :many
SELECT event.id, event.dt, event.money, event.description, tag.name AS tagName FROM event
LEFT OUTER JOIN event_to_tag ON event.id = event_to_tag.event_id
LEFT OUTER JOIN tag ON tag.id = event_to_tag.tag_id
WHERE
  (event.dt BETWEEN ? AND ?) AND
  (tag.name IN (/*SLICE:tagnames*/?))
ORDER BY event.id
`

type ListEventsWithTagsParams struct {
	FromDt   sql.NullTime
	ToDt     sql.NullTime
	Tagnames []sql.NullString
}

type ListEventsWithTagsRow struct {
	ID          int64
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
	Tagname     sql.NullString
}

func (q *Queries) ListEventsWithTags(ctx context.Context, arg ListEventsWithTagsParams) ([]ListEventsWithTagsRow, error) {
	query := listEventsWithTags
	var queryParams []interface{}
	queryParams = append(queryParams, arg.FromDt)
	queryParams = append(queryParams, arg.ToDt)
	if len(arg.Tagnames) > 0 {
		for _, v := range arg.Tagnames {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tagnames*/?", strings.Repeat(",?", len(arg.Tagnames))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tagnames*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEventsWithTagsRow
	for rows.Next() {
		var i ListEventsWithTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Dt,
			&i.Money,
			&i.Description,
			&i.Tagname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOutcomeEvents = `-- name: ListOutcomeEvents :many
SELECT event.id, event.dt, event.money, event.description, tag.name AS tagName FROM event
LEFT OUTER JOIN event_to_tag ON event.id = event_to_tag.event_id
LEFT OUTER JOIN tag ON tag.id = event_to_tag.tag_id
WHERE
  (event.dt BETWEEN ? AND ?) AND
  (event.money < 0)
ORDER BY event.id
`

type ListOutcomeEventsParams struct {
	FromDt sql.NullTime
	ToDt   sql.NullTime
}

type ListOutcomeEventsRow struct {
	ID          int64
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
	Tagname     sql.NullString
}

func (q *Queries) ListOutcomeEvents(ctx context.Context, arg ListOutcomeEventsParams) ([]ListOutcomeEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, listOutcomeEvents, arg.FromDt, arg.ToDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOutcomeEventsRow
	for rows.Next() {
		var i ListOutcomeEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Dt,
			&i.Money,
			&i.Description,
			&i.Tagname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOutcomeEventsWithTags = `-- name: ListOutcomeEventsWithTags :many
SELECT event.id, event.dt, event.money, event.description, tag.name AS tagName FROM event
LEFT OUTER JOIN event_to_tag ON event.id = event_to_tag.event_id
LEFT OUTER JOIN tag ON tag.id = event_to_tag.tag_id
WHERE
  (event.dt BETWEEN ? AND ?) AND
  (tag.name IN (/*SLICE:tagnames*/?)) AND
  (event.money < 0)
ORDER BY event.id
`

type ListOutcomeEventsWithTagsParams struct {
	FromDt   sql.NullTime
	ToDt     sql.NullTime
	Tagnames []sql.NullString
}

type ListOutcomeEventsWithTagsRow struct {
	ID          int64
	Dt          sql.NullTime
	Money       sql.NullInt32
	Description sql.NullString
	Tagname     sql.NullString
}

func (q *Queries) ListOutcomeEventsWithTags(ctx context.Context, arg ListOutcomeEventsWithTagsParams) ([]ListOutcomeEventsWithTagsRow, error) {
	query := listOutcomeEventsWithTags
	var queryParams []interface{}
	queryParams = append(queryParams, arg.FromDt)
	queryParams = append(queryParams, arg.ToDt)
	if len(arg.Tagnames) > 0 {
		for _, v := range arg.Tagnames {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tagnames*/?", strings.Repeat(",?", len(arg.Tagnames))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tagnames*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOutcomeEventsWithTagsRow
	for rows.Next() {
		var i ListOutcomeEventsWithTagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Dt,
			&i.Money,
			&i.Description,
			&i.Tagname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatterns = `-- name: ListPatterns :many
SELECT pattern.id, pattern.key_string, tag.name AS tagName FROM pattern
LEFT OUTER JOIN pattern_to_tag ON pattern.id = pattern_to_tag.pattern_id
LEFT OUTER JOIN tag ON tag.id = pattern_to_tag.tag_id
ORDER BY pattern.id
`

type ListPatternsRow struct {
	ID        int64
	KeyString sql.NullString
	Tagname   sql.NullString
}

func (q *Queries) ListPatterns(ctx context.Context) ([]ListPatternsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPatterns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPatternsRow
	for rows.Next() {
		var i ListPatternsRow
		if err := rows.Scan(&i.ID, &i.KeyString, &i.Tagname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name FROM tag
ORDER BY tag.id
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mapEventToTag = `-- name: MapEventToTag :execresult
INSERT INTO event_to_tag (event_id, tag_id) VALUES (?, ?)
`

type MapEventToTagParams struct {
	EventID sql.NullInt64
	TagID   sql.NullInt64
}

func (q *Queries) MapEventToTag(ctx context.Context, arg MapEventToTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, mapEventToTag, arg.EventID, arg.TagID)
}

const mapPatternToTag = `-- name: MapPatternToTag :execresult
INSERT INTO pattern_to_tag (pattern_id, tag_id) VALUES (?, ?)
`

type MapPatternToTagParams struct {
	PatternID sql.NullInt64
	TagID     sql.NullInt64
}

func (q *Queries) MapPatternToTag(ctx context.Context, arg MapPatternToTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, mapPatternToTag, arg.PatternID, arg.TagID)
}

const unmapEventFromTag = `-- name: UnmapEventFromTag :execresult
DELETE FROM event_to_tag
where event_id = ? AND tag_id = ?
`

type UnmapEventFromTagParams struct {
	EventID sql.NullInt64
	TagID   sql.NullInt64
}

func (q *Queries) UnmapEventFromTag(ctx context.Context, arg UnmapEventFromTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unmapEventFromTag, arg.EventID, arg.TagID)
}

const unmapPatternFromTag = `-- name: UnmapPatternFromTag :execresult
DELETE FROM pattern_to_tag
where pattern_id = ? AND tag_id = ?
`

type UnmapPatternFromTagParams struct {
	PatternID sql.NullInt64
	TagID     sql.NullInt64
}

func (q *Queries) UnmapPatternFromTag(ctx context.Context, arg UnmapPatternFromTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unmapPatternFromTag, arg.PatternID, arg.TagID)
}

const updateEventMoney = `-- name: UpdateEventMoney :exec
UPDATE event SET money = ?
WHERE id = ?
`

type UpdateEventMoneyParams struct {
	Money sql.NullInt32
	ID    int64
}

func (q *Queries) UpdateEventMoney(ctx context.Context, arg UpdateEventMoneyParams) error {
	_, err := q.db.ExecContext(ctx, updateEventMoney, arg.Money, arg.ID)
	return err
}
